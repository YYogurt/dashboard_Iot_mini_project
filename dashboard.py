# dashboard.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô MongoDB)
import streamlit as st
import time
from pymongo import MongoClient
import os

# --- Configuration ---
# --- ‚ú® ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‚ú® ---
# ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Secrets ‡∏Ç‡∏≠‡∏á Streamlit
MONGO_CONNECTION_STRING = os.environ.get("MONGO_CONNECTION_STRING")
MONGO_DB_NAME = "smartgarden"
MONGO_COLLECTION_NAME = "status"
# ------------------------------------
PI_IP_ADDRESS = os.environ.get("PI_IP_ADDRESS")
VIDEO_STREAM_URL = f"http://{PI_IP_ADDRESS}:8080/video_feed" if PI_IP_ADDRESS else None

# --- ‚ú® MongoDB Connection ‚ú® ---
@st.cache_resource
def get_mongo_collection():
    try:
        mongo_client = MongoClient(MONGO_CONNECTION_STRING)
        db = mongo_client[MONGO_DB_NAME]
        collection = db[MONGO_COLLECTION_NAME]
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        mongo_client.admin.command('ping')
        print("MongoDB connection successful.")
        return collection
    except Exception as e:
        st.error(f"Failed to connect to MongoDB: {e}")
        return None

collection = get_mongo_collection()
# ------------------------------------

def send_command_to_db(command_str: str):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå 'command' ‡∏Ç‡∏≠‡∏á document"""
    if collection:
        collection.update_one({"_id": "main_status"}, {"$set": {"command": command_str}})
        st.toast(f"Sent '{command_str}' command!")

# --- Main App ---
st.set_page_config(page_title="IoT Smart Garden", layout="wide")
st.title("üåø IoT Smart Garden (MongoDB)")

# --- UI Layout ---
if not collection:
    st.error("Database connection is not available. Please check the secrets.")
else:
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å DB
    data = collection.find_one({"_id": "main_status"})
    if not data:
        data = {} # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ dict ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
    
    left_col, right_col = st.columns(2)
    with left_col:
        st.subheader("Sensor Readings & Status")
        status_indicator = "üü¢ Connected to DB" if data else "üî¥ No Data"
        st.metric(label="Database Connection", value=status_indicator)
        st.write("---")
        
        # (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å 'data')
        s1, s2 = st.columns(2)
        s1.metric("üå°Ô∏è Air Temperature", f"{data.get('air_temp', 0):.2f} ¬∞C")
        s1.metric("üíß Air Humidity", f"{data.get('air_humidity', 0):.2f} %")
        s2.metric("‚òÄÔ∏è Light Intensity", f"{data.get('light_lux', 0):.2f} Lux")
        s2.metric("üå± Soil Moisture", f"{data.get('soil_moisture', 0)} (raw)")
        st.write("---")
        
        system_mode = data.get('mode', 'N/A').upper()
        st.header(f"Mode: {system_mode}")
        pump_status_text = "ON üü¢" if data.get("pump_on") else "OFF üî¥"
        st.write(f"### Pump Status: {pump_status_text}")
        
        st.write("**Manual Control (Only in MANUAL mode)**")
        btn_c1, btn_c2 = st.columns(2)
        is_manual_mode = (data.get('mode') == 'manual')
        
        if btn_c1.button("Turn Pump ON", key="pump_on", disabled=not is_manual_mode):
            send_command_to_db("PUMP_ON")

        if btn_c2.button("Turn Pump OFF", key="pump_off", disabled=not is_manual_mode):
            send_command_to_db("PUMP_OFF")
            
    with right_col:
        st.subheader("Live Feed")
        if VIDEO_STREAM_URL: st.image(VIDEO_STREAM_URL)
        
    # Auto-refresh
    time.sleep(2)
    st.rerun()